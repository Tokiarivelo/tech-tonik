generator client {
  provider               = "prisma-client-js"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
  moduleFormat           = "cjs"
  runtime                = "nodejs"
}

// generator nestgraphql {
//   provider              = "prisma-nestjs-graphql"
//   output                = "../src/dtos"
//   dtoInputNameSuffix    = "Input"
//   dtoModelNameSuffix    = "Model"
//   emitGraphQLTypes      = "true"
//   emitInputAndArgsTypes = "true"
//   prismaClientImport    = "@prisma/client"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserRoles")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  firstName    String
  lastName     String?
  phone        String?
  username     String         @unique
  password     String
  isVerified   Boolean        @default(false)
  tokens       RefreshToken[]
  images       UserImage[]
  pages      ExitPage[]    @relation("AuthorPages")
  reactions  Reaction[]
  votes      Vote[]
  comments   Comment[]
  views      PageView[]
  shares     PageShare[]
  versions   PageVersion[] @relation("UpdatesBy")
  createdAt  DateTime      @default(now())
  updatedAt    DateTime       @updatedAt
  Role         Role[]         @relation("UserRoles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model UserImage {
  id     String @id @default(uuid())
  url    String
  type   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserImage_userId_fkey")
}


model Tag {
  id      String @id @default(uuid())
  name    String
  pageId String

  ExitPage ExitPage[]
}

///////////////////////
// ENUMS
///////////////////////

enum Tone {
  DRAMATIC
  IRONIC
  CRINGE
  CLASSY
  TOUCHING
  ABSURD
  PASSIVE_AGGRESSIVE
  HONEST
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  SAD
  ANGRY
}

///////////////////////
// MODELS
///////////////////////

model Template {
  id           String        @id @default(uuid())
  name         String
  description  String
  // Structure complète des placeholders :
  // [
  //   {
  //     key: String,
  //     label: String,
  //     inputType: String,    // "input" | "textarea" | "file" | "media" | "component"
  //     component: String?,   // ex: "GifPicker", "ReactionPicker"
  //     required: Boolean?,
  //     multiple: Boolean?,
  //     accept: String[]?,
  //     rows: Int?,
  //     props: Json?          // props à passer au composant
  //   }, ...
  // ]
  placeholders Json
  // HTML/Markdown avec helpers conditionnels et insertion de {{key}}
  content      String
  pages        ExitPage[]
  uniqueKey    String     @unique
  createdAt    DateTime   @default(now())
}

model ExitPage {
  id           String        @id @default(uuid())
  author       User?         @relation("AuthorPages", fields: [authorId], references: [id])
  authorId     String?
  tone         Tone
  template     Template      @relation(fields: [templateId], references: [id])
  templateId   String
  // Données utilisateur, ex :
  // {
  //   "openingLine": "Adieu…",
  //   "gifUrls": ["https://…1.gif", "https://…2.gif"],
  //   "reactionWidget": { "default": "HAHA" }
  // }
  data         Json
  slug         String        @unique
  isHallOfFame Boolean       @default(false)
  reactions    Reaction[]
  votes        Vote[]
  comments     Comment[]
  views        PageView[]
  shares       PageShare[]
  versions     PageVersion[] @relation("PageVersions")
  tags         Tag[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reaction {
  id        String        @id @default(uuid())
  page      ExitPage      @relation(fields: [pageId], references: [id])
  pageId    String
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  type      ReactionType
  createdAt DateTime      @default(now())
  @@index([pageId, type])
}

model Vote {
  id        String     @id @default(uuid())
  page      ExitPage   @relation(fields: [pageId], references: [id])
  pageId    String
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime   @default(now())
  @@unique([pageId, userId], name: "one_vote_per_user_page")
}

model Comment {
  id              String     @id @default(uuid())
  page            ExitPage   @relation(fields: [pageId], references: [id])
  pageId          String
  user            User?      @relation(fields: [userId], references: [id])
  userId          String?
  content         String
  parentComment   Comment?   @relation("CommentThread", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[]  @relation("CommentThread")
  createdAt       DateTime   @default(now())
}

model PageVersion {
  id           String     @id @default(uuid())
  page         ExitPage   @relation("PageVersions", fields: [pageId], references: [id])
  pageId       String
  version      Int
  data         Json
  updatedBy    User?      @relation("UpdatesBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime   @default(now())
  @@unique([pageId, version], name: "one_version_per_page")
}

model PageView {
  id         String     @id @default(uuid())
  page       ExitPage   @relation(fields: [pageId], references: [id])
  pageId     String
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?
  sessionId  String?
  createdAt  DateTime   @default(now())
}

model PageShare {
  id         String     @id @default(uuid())
  page       ExitPage   @relation(fields: [pageId], references: [id])
  pageId     String
  platform   String
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime   @default(now())
}