# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  _count: CommentCount!
  content: String!
  createdAt: DateTime!
  id: ID!
  page: ExitPage!
  pageId: String!
  parentComment: Comment
  parentCommentId: String
  replies: [Comment!]
  user: User
  userId: String
}

type CommentCount {
  replies: Int!
}

input CommentCreateManyPageInput {
  content: String!
  createdAt: DateTime
  id: String
  parentCommentId: String
  userId: String
}

input CommentCreateManyPageInputEnvelope {
  data: [CommentCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyParentCommentInput {
  content: String!
  createdAt: DateTime
  id: String
  pageId: String!
  userId: String
}

input CommentCreateManyParentCommentInputEnvelope {
  data: [CommentCreateManyParentCommentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  content: String!
  createdAt: DateTime
  id: String
  pageId: String!
  parentCommentId: String
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutPageInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPageInput!]
  create: [CommentCreateWithoutPageInput!]
  createMany: CommentCreateManyPageInputEnvelope
}

input CommentCreateNestedManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
  createMany: CommentCreateManyParentCommentInputEnvelope
}

input CommentCreateNestedManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
}

input CommentCreateNestedOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  create: CommentCreateWithoutRepliesInput
}

input CommentCreateOrConnectWithoutPageInput {
  create: CommentCreateWithoutPageInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutPageInput {
  content: String!
  createdAt: DateTime
  id: String
  parentComment: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentCommentInput
  user: UserCreateNestedOneWithoutCommentsInput
}

input CommentCreateWithoutParentCommentInput {
  content: String!
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutCommentsInput!
  replies: CommentCreateNestedManyWithoutParentCommentInput
  user: UserCreateNestedOneWithoutCommentsInput
}

input CommentCreateWithoutRepliesInput {
  content: String!
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutCommentsInput!
  parentComment: CommentCreateNestedOneWithoutRepliesInput
  user: UserCreateNestedOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutCommentsInput!
  parentComment: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentCommentInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentNullableScalarRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  parentComment: CommentNullableScalarRelationFilter
  parentCommentId: StringNullableFilter
  replies: CommentListRelationFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

input CommentWhereUniqueInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  parentComment: CommentNullableScalarRelationFilter
  parentCommentId: StringNullableFilter
  replies: CommentListRelationFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumReactionTypeFilter {
  equals: ReactionType
  in: [ReactionType!]
  not: NestedEnumReactionTypeFilter
  notIn: [ReactionType!]
}

input EnumToneFilter {
  equals: Tone
  in: [Tone!]
  not: NestedEnumToneFilter
  notIn: [Tone!]
}

type ExitPage {
  _count: ExitPageCount!
  author: User
  authorId: String
  comments: [Comment!]
  createdAt: DateTime!
  data: JSON!
  id: ID!
  isHallOfFame: Boolean!
  reactions: [Reaction!]
  shares: [PageShare!]
  slug: String!
  tags: [Tag!]
  template: Template!
  templateId: String!
  tone: Tone!
  updatedAt: DateTime!
  versions: [PageVersion!]
  views: [PageView!]
  votes: [Vote!]
}

type ExitPageCount {
  comments: Int!
  reactions: Int!
  shares: Int!
  tags: Int!
  versions: Int!
  views: Int!
  votes: Int!
}

input ExitPageCreateInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateManyAuthorInput {
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  slug: String!
  templateId: String!
  tone: Tone!
  updatedAt: DateTime
}

input ExitPageCreateManyAuthorInputEnvelope {
  data: [ExitPageCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input ExitPageCreateManyTemplateInput {
  authorId: String
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  slug: String!
  tone: Tone!
  updatedAt: DateTime
}

input ExitPageCreateManyTemplateInputEnvelope {
  data: [ExitPageCreateManyTemplateInput!]!
  skipDuplicates: Boolean
}

input ExitPageCreateNestedManyWithoutAuthorInput {
  connect: [ExitPageWhereUniqueInput!]
  connectOrCreate: [ExitPageCreateOrConnectWithoutAuthorInput!]
  create: [ExitPageCreateWithoutAuthorInput!]
  createMany: ExitPageCreateManyAuthorInputEnvelope
}

input ExitPageCreateNestedManyWithoutTemplateInput {
  connect: [ExitPageWhereUniqueInput!]
  connectOrCreate: [ExitPageCreateOrConnectWithoutTemplateInput!]
  create: [ExitPageCreateWithoutTemplateInput!]
  createMany: ExitPageCreateManyTemplateInputEnvelope
}

input ExitPageCreateNestedOneWithoutCommentsInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutCommentsInput
  create: ExitPageCreateWithoutCommentsInput
}

input ExitPageCreateNestedOneWithoutReactionsInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutReactionsInput
  create: ExitPageCreateWithoutReactionsInput
}

input ExitPageCreateNestedOneWithoutSharesInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutSharesInput
  create: ExitPageCreateWithoutSharesInput
}

input ExitPageCreateNestedOneWithoutVersionsInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutVersionsInput
  create: ExitPageCreateWithoutVersionsInput
}

input ExitPageCreateNestedOneWithoutViewsInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutViewsInput
  create: ExitPageCreateWithoutViewsInput
}

input ExitPageCreateNestedOneWithoutVotesInput {
  connect: ExitPageWhereUniqueInput
  connectOrCreate: ExitPageCreateOrConnectWithoutVotesInput
  create: ExitPageCreateWithoutVotesInput
}

input ExitPageCreateOrConnectWithoutAuthorInput {
  create: ExitPageCreateWithoutAuthorInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutCommentsInput {
  create: ExitPageCreateWithoutCommentsInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutReactionsInput {
  create: ExitPageCreateWithoutReactionsInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutSharesInput {
  create: ExitPageCreateWithoutSharesInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutTemplateInput {
  create: ExitPageCreateWithoutTemplateInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutVersionsInput {
  create: ExitPageCreateWithoutVersionsInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutViewsInput {
  create: ExitPageCreateWithoutViewsInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateOrConnectWithoutVotesInput {
  create: ExitPageCreateWithoutVotesInput!
  where: ExitPageWhereUniqueInput!
}

input ExitPageCreateWithoutAuthorInput {
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPagesInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutReactionsInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutSharesInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutTemplateInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutVersionsInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  views: PageViewCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutViewsInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  votes: VoteCreateNestedManyWithoutPageInput
}

input ExitPageCreateWithoutVotesInput {
  author: UserCreateNestedOneWithoutPagesInput
  comments: CommentCreateNestedManyWithoutPageInput
  createdAt: DateTime
  data: JSON!
  id: String
  isHallOfFame: Boolean
  reactions: ReactionCreateNestedManyWithoutPageInput
  shares: PageShareCreateNestedManyWithoutPageInput
  slug: String!
  tags: TagCreateNestedManyWithoutExitPageInput
  template: TemplateCreateNestedOneWithoutPagesInput!
  tone: Tone!
  updatedAt: DateTime
  versions: PageVersionCreateNestedManyWithoutPageInput
  views: PageViewCreateNestedManyWithoutPageInput
}

input ExitPageListRelationFilter {
  every: ExitPageWhereInput
  none: ExitPageWhereInput
  some: ExitPageWhereInput
}

input ExitPageOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ExitPageOrderByRelevanceFieldEnum {
  authorId
  id
  slug
  templateId
}

input ExitPageOrderByRelevanceInput {
  fields: [ExitPageOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ExitPageOrderByWithRelationInput {
  _relevance: ExitPageOrderByRelevanceInput
  author: UserOrderByWithRelationInput
  authorId: SortOrderInput
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  isHallOfFame: SortOrder
  reactions: ReactionOrderByRelationAggregateInput
  shares: PageShareOrderByRelationAggregateInput
  slug: SortOrder
  tags: TagOrderByRelationAggregateInput
  template: TemplateOrderByWithRelationInput
  templateId: SortOrder
  tone: SortOrder
  updatedAt: SortOrder
  versions: PageVersionOrderByRelationAggregateInput
  views: PageViewOrderByRelationAggregateInput
  votes: VoteOrderByRelationAggregateInput
}

enum ExitPageScalarFieldEnum {
  authorId
  createdAt
  data
  id
  isHallOfFame
  slug
  templateId
  tone
  updatedAt
}

input ExitPageScalarRelationFilter {
  is: ExitPageWhereInput
  isNot: ExitPageWhereInput
}

input ExitPageWhereInput {
  AND: [ExitPageWhereInput!]
  NOT: [ExitPageWhereInput!]
  OR: [ExitPageWhereInput!]
  author: UserNullableScalarRelationFilter
  authorId: StringNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  id: StringFilter
  isHallOfFame: BoolFilter
  reactions: ReactionListRelationFilter
  shares: PageShareListRelationFilter
  slug: StringFilter
  tags: TagListRelationFilter
  template: TemplateScalarRelationFilter
  templateId: StringFilter
  tone: EnumToneFilter
  updatedAt: DateTimeFilter
  versions: PageVersionListRelationFilter
  views: PageViewListRelationFilter
  votes: VoteListRelationFilter
}

input ExitPageWhereUniqueInput {
  AND: [ExitPageWhereInput!]
  NOT: [ExitPageWhereInput!]
  OR: [ExitPageWhereInput!]
  author: UserNullableScalarRelationFilter
  authorId: StringNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  id: String
  isHallOfFame: BoolFilter
  reactions: ReactionListRelationFilter
  shares: PageShareListRelationFilter
  slug: String
  tags: TagListRelationFilter
  template: TemplateScalarRelationFilter
  templateId: StringFilter
  tone: EnumToneFilter
  updatedAt: DateTimeFilter
  versions: PageVersionListRelationFilter
  views: PageViewListRelationFilter
  votes: VoteListRelationFilter
}

type FileUploadResult {
  url: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  mode: QueryMode
  not: JSON
  path: String
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String
  user: User
}

type Mutation {
  createExitPage(input: ExitPageCreateInput!): ExitPage!
  createTemplate(input: TemplateCreateInput!): Template!
  createUser(input: UserCreateInput!): User!
  login(data: LoginInput!): LoginOutput
  logout: Boolean!
  register(data: RegisterInput!): User!
  updateExitPage(id: String!, input: ExitPageCreateInput!): ExitPage!
  updateTemplate(id: String!, input: TemplateCreateInput!): Template!
  uploadFile(file: Upload!, path: String): FileUploadResult!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumReactionTypeFilter {
  equals: ReactionType
  in: [ReactionType!]
  not: NestedEnumReactionTypeFilter
  notIn: [ReactionType!]
}

input NestedEnumToneFilter {
  equals: Tone
  in: [Tone!]
  not: NestedEnumToneFilter
  notIn: [Tone!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type PageShare {
  createdAt: DateTime!
  id: ID!
  page: ExitPage!
  pageId: String!
  platform: String!
  user: User
  userId: String
}

input PageShareCreateManyPageInput {
  createdAt: DateTime
  id: String
  platform: String!
  userId: String
}

input PageShareCreateManyPageInputEnvelope {
  data: [PageShareCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input PageShareCreateManyUserInput {
  createdAt: DateTime
  id: String
  pageId: String!
  platform: String!
}

input PageShareCreateManyUserInputEnvelope {
  data: [PageShareCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PageShareCreateNestedManyWithoutPageInput {
  connect: [PageShareWhereUniqueInput!]
  connectOrCreate: [PageShareCreateOrConnectWithoutPageInput!]
  create: [PageShareCreateWithoutPageInput!]
  createMany: PageShareCreateManyPageInputEnvelope
}

input PageShareCreateNestedManyWithoutUserInput {
  connect: [PageShareWhereUniqueInput!]
  connectOrCreate: [PageShareCreateOrConnectWithoutUserInput!]
  create: [PageShareCreateWithoutUserInput!]
  createMany: PageShareCreateManyUserInputEnvelope
}

input PageShareCreateOrConnectWithoutPageInput {
  create: PageShareCreateWithoutPageInput!
  where: PageShareWhereUniqueInput!
}

input PageShareCreateOrConnectWithoutUserInput {
  create: PageShareCreateWithoutUserInput!
  where: PageShareWhereUniqueInput!
}

input PageShareCreateWithoutPageInput {
  createdAt: DateTime
  id: String
  platform: String!
  user: UserCreateNestedOneWithoutSharesInput
}

input PageShareCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutSharesInput!
  platform: String!
}

input PageShareListRelationFilter {
  every: PageShareWhereInput
  none: PageShareWhereInput
  some: PageShareWhereInput
}

input PageShareOrderByRelationAggregateInput {
  _count: SortOrder
}

input PageShareWhereInput {
  AND: [PageShareWhereInput!]
  NOT: [PageShareWhereInput!]
  OR: [PageShareWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  platform: StringFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

input PageShareWhereUniqueInput {
  AND: [PageShareWhereInput!]
  NOT: [PageShareWhereInput!]
  OR: [PageShareWhereInput!]
  createdAt: DateTimeFilter
  id: String
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  platform: StringFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

type PageVersion {
  createdAt: DateTime!
  data: JSON!
  id: ID!
  page: ExitPage!
  pageId: String!
  updatedBy: User
  updatedById: String
  version: Int!
}

input PageVersionCreateManyPageInput {
  createdAt: DateTime
  data: JSON!
  id: String
  updatedById: String
  version: Int!
}

input PageVersionCreateManyPageInputEnvelope {
  data: [PageVersionCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input PageVersionCreateManyUpdatedByInput {
  createdAt: DateTime
  data: JSON!
  id: String
  pageId: String!
  version: Int!
}

input PageVersionCreateManyUpdatedByInputEnvelope {
  data: [PageVersionCreateManyUpdatedByInput!]!
  skipDuplicates: Boolean
}

input PageVersionCreateNestedManyWithoutPageInput {
  connect: [PageVersionWhereUniqueInput!]
  connectOrCreate: [PageVersionCreateOrConnectWithoutPageInput!]
  create: [PageVersionCreateWithoutPageInput!]
  createMany: PageVersionCreateManyPageInputEnvelope
}

input PageVersionCreateNestedManyWithoutUpdatedByInput {
  connect: [PageVersionWhereUniqueInput!]
  connectOrCreate: [PageVersionCreateOrConnectWithoutUpdatedByInput!]
  create: [PageVersionCreateWithoutUpdatedByInput!]
  createMany: PageVersionCreateManyUpdatedByInputEnvelope
}

input PageVersionCreateOrConnectWithoutPageInput {
  create: PageVersionCreateWithoutPageInput!
  where: PageVersionWhereUniqueInput!
}

input PageVersionCreateOrConnectWithoutUpdatedByInput {
  create: PageVersionCreateWithoutUpdatedByInput!
  where: PageVersionWhereUniqueInput!
}

input PageVersionCreateWithoutPageInput {
  createdAt: DateTime
  data: JSON!
  id: String
  updatedBy: UserCreateNestedOneWithoutVersionsInput
  version: Int!
}

input PageVersionCreateWithoutUpdatedByInput {
  createdAt: DateTime
  data: JSON!
  id: String
  page: ExitPageCreateNestedOneWithoutVersionsInput!
  version: Int!
}

input PageVersionListRelationFilter {
  every: PageVersionWhereInput
  none: PageVersionWhereInput
  some: PageVersionWhereInput
}

input PageVersionOne_version_per_pageCompoundUniqueInput {
  pageId: String!
  version: Int!
}

input PageVersionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PageVersionWhereInput {
  AND: [PageVersionWhereInput!]
  NOT: [PageVersionWhereInput!]
  OR: [PageVersionWhereInput!]
  createdAt: DateTimeFilter
  data: JsonFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  updatedBy: UserNullableScalarRelationFilter
  updatedById: StringNullableFilter
  version: IntFilter
}

input PageVersionWhereUniqueInput {
  AND: [PageVersionWhereInput!]
  NOT: [PageVersionWhereInput!]
  OR: [PageVersionWhereInput!]
  createdAt: DateTimeFilter
  data: JsonFilter
  id: String
  one_version_per_page: PageVersionOne_version_per_pageCompoundUniqueInput
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  updatedBy: UserNullableScalarRelationFilter
  updatedById: StringNullableFilter
  version: IntFilter
}

type PageView {
  createdAt: DateTime!
  id: ID!
  page: ExitPage!
  pageId: String!
  sessionId: String
  user: User
  userId: String
}

input PageViewCreateManyPageInput {
  createdAt: DateTime
  id: String
  sessionId: String
  userId: String
}

input PageViewCreateManyPageInputEnvelope {
  data: [PageViewCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input PageViewCreateManyUserInput {
  createdAt: DateTime
  id: String
  pageId: String!
  sessionId: String
}

input PageViewCreateManyUserInputEnvelope {
  data: [PageViewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PageViewCreateNestedManyWithoutPageInput {
  connect: [PageViewWhereUniqueInput!]
  connectOrCreate: [PageViewCreateOrConnectWithoutPageInput!]
  create: [PageViewCreateWithoutPageInput!]
  createMany: PageViewCreateManyPageInputEnvelope
}

input PageViewCreateNestedManyWithoutUserInput {
  connect: [PageViewWhereUniqueInput!]
  connectOrCreate: [PageViewCreateOrConnectWithoutUserInput!]
  create: [PageViewCreateWithoutUserInput!]
  createMany: PageViewCreateManyUserInputEnvelope
}

input PageViewCreateOrConnectWithoutPageInput {
  create: PageViewCreateWithoutPageInput!
  where: PageViewWhereUniqueInput!
}

input PageViewCreateOrConnectWithoutUserInput {
  create: PageViewCreateWithoutUserInput!
  where: PageViewWhereUniqueInput!
}

input PageViewCreateWithoutPageInput {
  createdAt: DateTime
  id: String
  sessionId: String
  user: UserCreateNestedOneWithoutViewsInput
}

input PageViewCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutViewsInput!
  sessionId: String
}

input PageViewListRelationFilter {
  every: PageViewWhereInput
  none: PageViewWhereInput
  some: PageViewWhereInput
}

input PageViewOrderByRelationAggregateInput {
  _count: SortOrder
}

input PageViewWhereInput {
  AND: [PageViewWhereInput!]
  NOT: [PageViewWhereInput!]
  OR: [PageViewWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  sessionId: StringNullableFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

input PageViewWhereUniqueInput {
  AND: [PageViewWhereInput!]
  NOT: [PageViewWhereInput!]
  OR: [PageViewWhereInput!]
  createdAt: DateTimeFilter
  id: String
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  sessionId: StringNullableFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

type Query {
  exitPage(id: String!): ExitPage!
  exitPages(cursor: ExitPageWhereUniqueInput, distinct: [ExitPageScalarFieldEnum!], orderBy: [ExitPageOrderByWithRelationInput!], skip: Int, take: Int, where: ExitPageWhereInput): [ExitPage!]!
  me: User!
  template(id: String!): Template!
  templates(cursor: TemplateWhereUniqueInput, distinct: [TemplateScalarFieldEnum!], orderBy: [TemplateOrderByWithRelationInput!], skip: Int, take: Int, where: TemplateWhereInput): [Template!]!
  user(id: String!): User!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Reaction {
  createdAt: DateTime!
  id: ID!
  page: ExitPage!
  pageId: String!
  type: ReactionType!
  user: User
  userId: String
}

input ReactionCreateManyPageInput {
  createdAt: DateTime
  id: String
  type: ReactionType!
  userId: String
}

input ReactionCreateManyPageInputEnvelope {
  data: [ReactionCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input ReactionCreateManyUserInput {
  createdAt: DateTime
  id: String
  pageId: String!
  type: ReactionType!
}

input ReactionCreateManyUserInputEnvelope {
  data: [ReactionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReactionCreateNestedManyWithoutPageInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPageInput!]
  create: [ReactionCreateWithoutPageInput!]
  createMany: ReactionCreateManyPageInputEnvelope
}

input ReactionCreateNestedManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutUserInput!]
  create: [ReactionCreateWithoutUserInput!]
  createMany: ReactionCreateManyUserInputEnvelope
}

input ReactionCreateOrConnectWithoutPageInput {
  create: ReactionCreateWithoutPageInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutUserInput {
  create: ReactionCreateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateWithoutPageInput {
  createdAt: DateTime
  id: String
  type: ReactionType!
  user: UserCreateNestedOneWithoutReactionsInput
}

input ReactionCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutReactionsInput!
  type: ReactionType!
}

input ReactionListRelationFilter {
  every: ReactionWhereInput
  none: ReactionWhereInput
  some: ReactionWhereInput
}

input ReactionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ReactionType {
  ANGRY
  HAHA
  LIKE
  LOVE
  SAD
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  type: EnumReactionTypeFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

input ReactionWhereUniqueInput {
  AND: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  createdAt: DateTimeFilter
  id: String
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  type: EnumReactionTypeFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

type RefreshToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  token: String!
  user: User!
  userId: String!
}

input RefreshTokenCreateManyUserInput {
  createdAt: DateTime
  expiresAt: DateTime!
  id: String
  token: String!
}

input RefreshTokenCreateManyUserInputEnvelope {
  data: [RefreshTokenCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input RefreshTokenCreateNestedManyWithoutUserInput {
  connect: [RefreshTokenWhereUniqueInput!]
  connectOrCreate: [RefreshTokenCreateOrConnectWithoutUserInput!]
  create: [RefreshTokenCreateWithoutUserInput!]
  createMany: RefreshTokenCreateManyUserInputEnvelope
}

input RefreshTokenCreateOrConnectWithoutUserInput {
  create: RefreshTokenCreateWithoutUserInput!
  where: RefreshTokenWhereUniqueInput!
}

input RefreshTokenCreateWithoutUserInput {
  createdAt: DateTime
  expiresAt: DateTime!
  id: String
  token: String!
}

input RefreshTokenListRelationFilter {
  every: RefreshTokenWhereInput
  none: RefreshTokenWhereInput
  some: RefreshTokenWhereInput
}

input RefreshTokenOrderByRelationAggregateInput {
  _count: SortOrder
}

input RefreshTokenWhereInput {
  AND: [RefreshTokenWhereInput!]
  NOT: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  id: StringFilter
  token: StringFilter
  user: UserScalarRelationFilter
  userId: StringFilter
}

input RefreshTokenWhereUniqueInput {
  AND: [RefreshTokenWhereInput!]
  NOT: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  id: String
  token: String
  user: UserScalarRelationFilter
  userId: StringFilter
}

input RegisterInput {
  email: String!
  firstName: String!
  password: String!
  username: String!
}

type Role {
  _count: RoleCount!
  id: ID!
  name: String!
  users: [User!]
}

type RoleCount {
  users: Int!
}

input RoleCreateNestedManyWithoutUsersInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutUsersInput!]
  create: [RoleCreateWithoutUsersInput!]
}

input RoleCreateOrConnectWithoutUsersInput {
  create: RoleCreateWithoutUsersInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateWithoutUsersInput {
  id: String
  name: String!
}

input RoleListRelationFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: StringFilter
  name: StringFilter
  users: UserListRelationFilter
}

input RoleWhereUniqueInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: String
  name: String
  users: UserListRelationFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Tag {
  ExitPage: [ExitPage!]
  _count: TagCount!
  id: ID!
  name: String!
  pageId: String!
}

type TagCount {
  ExitPage: Int!
}

input TagCreateNestedManyWithoutExitPageInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutExitPageInput!]
  create: [TagCreateWithoutExitPageInput!]
}

input TagCreateOrConnectWithoutExitPageInput {
  create: TagCreateWithoutExitPageInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutExitPageInput {
  id: String
  name: String!
  pageId: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagWhereInput {
  AND: [TagWhereInput!]
  ExitPage: ExitPageListRelationFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: StringFilter
  name: StringFilter
  pageId: StringFilter
}

input TagWhereUniqueInput {
  AND: [TagWhereInput!]
  ExitPage: ExitPageListRelationFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: String
  name: StringFilter
  pageId: StringFilter
}

type Template {
  _count: TemplateCount!
  content: String!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  pages: [ExitPage!]
  placeholders: JSON!
}

type TemplateCount {
  pages: Int!
}

input TemplateCreateInput {
  content: String!
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  pages: ExitPageCreateNestedManyWithoutTemplateInput
  placeholders: JSON!
}

input TemplateCreateNestedOneWithoutPagesInput {
  connect: TemplateWhereUniqueInput
  connectOrCreate: TemplateCreateOrConnectWithoutPagesInput
  create: TemplateCreateWithoutPagesInput
}

input TemplateCreateOrConnectWithoutPagesInput {
  create: TemplateCreateWithoutPagesInput!
  where: TemplateWhereUniqueInput!
}

input TemplateCreateWithoutPagesInput {
  content: String!
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  placeholders: JSON!
}

enum TemplateOrderByRelevanceFieldEnum {
  content
  description
  id
  name
}

input TemplateOrderByRelevanceInput {
  fields: [TemplateOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TemplateOrderByWithRelationInput {
  _relevance: TemplateOrderByRelevanceInput
  content: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  pages: ExitPageOrderByRelationAggregateInput
  placeholders: SortOrder
}

enum TemplateScalarFieldEnum {
  content
  createdAt
  description
  id
  name
  placeholders
}

input TemplateScalarRelationFilter {
  is: TemplateWhereInput
  isNot: TemplateWhereInput
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  pages: ExitPageListRelationFilter
  placeholders: JsonFilter
}

input TemplateWhereUniqueInput {
  AND: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  name: StringFilter
  pages: ExitPageListRelationFilter
  placeholders: JsonFilter
}

enum Tone {
  ABSURD
  CLASSY
  CRINGE
  DRAMATIC
  HONEST
  IRONIC
  PASSIVE_AGGRESSIVE
  TOUCHING
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  Role: [Role!]
  _count: UserCount!
  comments: [Comment!]
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  images: [UserImage!]
  isVerified: Boolean!
  lastName: String
  pages: [ExitPage!]
  password: String!
  phone: String
  reactions: [Reaction!]
  shares: [PageShare!]
  tokens: [RefreshToken!]
  updatedAt: DateTime!
  username: String!
  versions: [PageVersion!]
  views: [PageView!]
  votes: [Vote!]
}

type UserCount {
  Role: Int!
  comments: Int!
  images: Int!
  pages: Int!
  reactions: Int!
  shares: Int!
  tokens: Int!
  versions: Int!
  views: Int!
  votes: Int!
}

input UserCreateInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutPagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPagesInput
  create: UserCreateWithoutPagesInput
}

input UserCreateNestedOneWithoutReactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionsInput
  create: UserCreateWithoutReactionsInput
}

input UserCreateNestedOneWithoutSharesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSharesInput
  create: UserCreateWithoutSharesInput
}

input UserCreateNestedOneWithoutVersionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVersionsInput
  create: UserCreateWithoutVersionsInput
}

input UserCreateNestedOneWithoutViewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutViewsInput
  create: UserCreateWithoutViewsInput
}

input UserCreateNestedOneWithoutVotesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesInput
  create: UserCreateWithoutVotesInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPagesInput {
  create: UserCreateWithoutPagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSharesInput {
  create: UserCreateWithoutSharesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVersionsInput {
  create: UserCreateWithoutVersionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutViewsInput {
  create: UserCreateWithoutViewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutPagesInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReactionsInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSharesInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVersionsInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  views: PageViewCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutViewsInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  Role: RoleCreateNestedManyWithoutUsersInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  images: UserImageCreateNestedManyWithoutUserInput
  isVerified: Boolean
  lastName: String
  pages: ExitPageCreateNestedManyWithoutAuthorInput
  password: String!
  phone: String
  reactions: ReactionCreateNestedManyWithoutUserInput
  shares: PageShareCreateNestedManyWithoutUserInput
  tokens: RefreshTokenCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
  versions: PageVersionCreateNestedManyWithoutUpdatedByInput
  views: PageViewCreateNestedManyWithoutUserInput
}

type UserImage {
  id: ID!
  type: String!
  url: String!
  user: User!
  userId: String!
}

input UserImageCreateManyUserInput {
  id: String
  type: String!
  url: String!
}

input UserImageCreateManyUserInputEnvelope {
  data: [UserImageCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserImageCreateNestedManyWithoutUserInput {
  connect: [UserImageWhereUniqueInput!]
  connectOrCreate: [UserImageCreateOrConnectWithoutUserInput!]
  create: [UserImageCreateWithoutUserInput!]
  createMany: UserImageCreateManyUserInputEnvelope
}

input UserImageCreateOrConnectWithoutUserInput {
  create: UserImageCreateWithoutUserInput!
  where: UserImageWhereUniqueInput!
}

input UserImageCreateWithoutUserInput {
  id: String
  type: String!
  url: String!
}

input UserImageListRelationFilter {
  every: UserImageWhereInput
  none: UserImageWhereInput
  some: UserImageWhereInput
}

input UserImageOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserImageWhereInput {
  AND: [UserImageWhereInput!]
  NOT: [UserImageWhereInput!]
  OR: [UserImageWhereInput!]
  id: StringFilter
  type: StringFilter
  url: StringFilter
  user: UserScalarRelationFilter
  userId: StringFilter
}

input UserImageWhereUniqueInput {
  AND: [UserImageWhereInput!]
  NOT: [UserImageWhereInput!]
  OR: [UserImageWhereInput!]
  id: String
  type: StringFilter
  url: StringFilter
  user: UserScalarRelationFilter
  userId: StringFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserNullableScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserOrderByRelevanceFieldEnum {
  email
  firstName
  id
  lastName
  password
  phone
  username
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationInput {
  Role: RoleOrderByRelationAggregateInput
  _relevance: UserOrderByRelevanceInput
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  images: UserImageOrderByRelationAggregateInput
  isVerified: SortOrder
  lastName: SortOrderInput
  pages: ExitPageOrderByRelationAggregateInput
  password: SortOrder
  phone: SortOrderInput
  reactions: ReactionOrderByRelationAggregateInput
  shares: PageShareOrderByRelationAggregateInput
  tokens: RefreshTokenOrderByRelationAggregateInput
  updatedAt: SortOrder
  username: SortOrder
  versions: PageVersionOrderByRelationAggregateInput
  views: PageViewOrderByRelationAggregateInput
  votes: VoteOrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  firstName
  id
  isVerified
  lastName
  password
  phone
  updatedAt
  username
}

input UserScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Role: RoleListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  images: UserImageListRelationFilter
  isVerified: BoolFilter
  lastName: StringNullableFilter
  pages: ExitPageListRelationFilter
  password: StringFilter
  phone: StringNullableFilter
  reactions: ReactionListRelationFilter
  shares: PageShareListRelationFilter
  tokens: RefreshTokenListRelationFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  versions: PageVersionListRelationFilter
  views: PageViewListRelationFilter
  votes: VoteListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Role: RoleListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: String
  firstName: StringFilter
  id: String
  images: UserImageListRelationFilter
  isVerified: BoolFilter
  lastName: StringNullableFilter
  pages: ExitPageListRelationFilter
  password: StringFilter
  phone: StringNullableFilter
  reactions: ReactionListRelationFilter
  shares: PageShareListRelationFilter
  tokens: RefreshTokenListRelationFilter
  updatedAt: DateTimeFilter
  username: String
  versions: PageVersionListRelationFilter
  views: PageViewListRelationFilter
  votes: VoteListRelationFilter
}

type Vote {
  createdAt: DateTime!
  id: ID!
  page: ExitPage!
  pageId: String!
  user: User
  userId: String
}

input VoteCreateManyPageInput {
  createdAt: DateTime
  id: String
  userId: String
}

input VoteCreateManyPageInputEnvelope {
  data: [VoteCreateManyPageInput!]!
  skipDuplicates: Boolean
}

input VoteCreateManyUserInput {
  createdAt: DateTime
  id: String
  pageId: String!
}

input VoteCreateManyUserInputEnvelope {
  data: [VoteCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VoteCreateNestedManyWithoutPageInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutPageInput!]
  create: [VoteCreateWithoutPageInput!]
  createMany: VoteCreateManyPageInputEnvelope
}

input VoteCreateNestedManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutUserInput!]
  create: [VoteCreateWithoutUserInput!]
  createMany: VoteCreateManyUserInputEnvelope
}

input VoteCreateOrConnectWithoutPageInput {
  create: VoteCreateWithoutPageInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateWithoutPageInput {
  createdAt: DateTime
  id: String
  user: UserCreateNestedOneWithoutVotesInput
}

input VoteCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  page: ExitPageCreateNestedOneWithoutVotesInput!
}

input VoteListRelationFilter {
  every: VoteWhereInput
  none: VoteWhereInput
  some: VoteWhereInput
}

input VoteOne_vote_per_user_pageCompoundUniqueInput {
  pageId: String!
  userId: String!
}

input VoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}

input VoteWhereUniqueInput {
  AND: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  createdAt: DateTimeFilter
  id: String
  one_vote_per_user_page: VoteOne_vote_per_user_pageCompoundUniqueInput
  page: ExitPageScalarRelationFilter
  pageId: StringFilter
  user: UserNullableScalarRelationFilter
  userId: StringNullableFilter
}